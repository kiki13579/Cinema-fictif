import { createUser, getUserByUsername, initializeLocalStorage } from '../api/localStorageManager.js';

// Fonction utilitaire pour afficher un message d'erreur sp√©cifique √† un champ
function showError(element, message) {
    if (element) {
        element.textContent = message;
        element.style.display = 'block'; // Affiche le message
        element.style.color = 'red';     // Style pour les erreurs
    }
}

// Fonction utilitaire pour masquer un message d'erreur sp√©cifique √† un champ
function hideError(element) {
    if (element) {
        element.textContent = '';
        element.style.display = 'none'; // Masque le message
    }
}

// Attendre que le DOM soit compl√®tement charg√© avant de manipuler les √©l√©ments HTML
document.addEventListener('DOMContentLoaded', async () => {
    // Initialise le LocalStorage si ce n'est pas d√©j√† fait.
    initializeLocalStorage(); 

    const signupForm = document.getElementById('signupForm');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const consentCheckbox = document.getElementById('consent'); // R√©f√©rence √† la checkbox
    const signupMessage = document.getElementById('signupMessage'); // Message g√©n√©ral succ√®s/√©chec

    // R√©f√©rences aux √©l√©ments de messages d'erreur sp√©cifiques aux champs
    const passwordErrorP = document.getElementById('password-error');
    const confirmPasswordErrorP = document.getElementById('confirm-password-error');
    const consentTextP = document.getElementById('consent-text'); // Texte d'erreur pour le consentement

    // R√©f√©rence aux boutons de bascule de visibilit√© des mots de passe
    const passwordToggleButtons = document.querySelectorAll('.password-toggle');

    // V√©rifie que le formulaire a bien √©t√© trouv√© dans le DOM
    if (!signupForm) {
        console.error("Erreur: Le formulaire avec l'ID 'signupForm' n'a pas √©t√© trouv√©.");
        return; // Arr√™te l'ex√©cution si le formulaire n'est pas l√†
    }

    // --- Logique de bascule de visibilit√© des mots de passe ---
    passwordToggleButtons.forEach(button => {
        button.addEventListener('click', () => {
            // CORRECTION ICI : Cherche l'input √† l'int√©rieur du m√™me √©l√©ment parent que le bouton
            const inputField = button.parentElement.querySelector('input[type="password"], input[type="text"]'); 
            
            if (inputField) { // S'assurer que l'input a √©t√© trouv√©
                inputField.type = inputField.type === 'password' ? 'text' : 'password';
                button.textContent = inputField.type === 'password' ? 'üëÅÔ∏è' : 'üîí'; // Change l'ic√¥ne
                button.setAttribute('aria-label', inputField.type === 'password' ? 'Afficher le mot de passe' : 'Masquer le mot de passe');
            }
        });
    });

    // --- √âcouteurs d'√©v√©nements pour masquer les erreurs quand l'utilisateur corrige ---
    usernameInput.addEventListener('input', () => hideError(signupMessage)); // Masquer le message g√©n√©ral
    passwordInput.addEventListener('input', () => {
        hideError(passwordErrorP);
        hideError(signupMessage);
        if (confirmPasswordInput.value) { // Si la confirmation a d√©j√† du texte, v√©rifier de nouveau la correspondance
            if (passwordInput.value !== confirmPasswordInput.value) {
                showError(confirmPasswordErrorP, "Les mots de passe ne correspondent pas.");
            } else {
                hideError(confirmPasswordErrorP);
            }
        }
    });
    confirmPasswordInput.addEventListener('input', () => {
        hideError(confirmPasswordErrorP);
        hideError(signupMessage);
        if (passwordInput.value !== confirmPasswordInput.value) {
            showError(confirmPasswordErrorP, "Les mots de passe ne correspondent pas.");
        }
    });
    consentCheckbox.addEventListener('change', () => hideError(consentTextP));


    // Ajoute un √©couteur d'√©v√©nement pour la soumission du formulaire
    signupForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Emp√™che le comportement par d√©faut du formulaire (rechargement de la page)

        // Masque tous les messages d'erreur pr√©c√©dents avant de re-valider
        hideError(signupMessage);
        hideError(passwordErrorP);
        hideError(confirmPasswordErrorP);
        hideError(consentTextP);

        const username = usernameInput.value.trim();
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        const consentGiven = consentCheckbox.checked; // √âtat de la checkbox

        // --- Validations c√¥t√© client plus d√©taill√©es ---
        let hasError = false; // Flag pour suivre les erreurs

        // Validation du nom d'utilisateur
        if (username === '') {
            showError(signupMessage, "Le nom d'utilisateur ne peut pas √™tre vide.");
            hasError = true;
        } else if (username.length < 3 || username.length > 50) {
            showError(signupMessage, "Le nom d'utilisateur doit contenir entre 3 et 50 caract√®res.");
            hasError = true;
        }

        // Validation du mot de passe
        if (password === '') {
            showError(passwordErrorP, "Le mot de passe ne peut pas √™tre vide.");
            hasError = true;
        } else if (password.length < 8) {
            showError(passwordErrorP, "Le mot de passe doit contenir au moins 8 caract√®res.");
            hasError = true;
        }

        // Validation de la confirmation du mot de passe
        if (password !== confirmPassword) {
            showError(confirmPasswordErrorP, "Les mots de passe ne correspondent pas.");
            hasError = true;
        }

        // Validation du consentement
        if (!consentGiven) {
            showError(consentTextP, "Vous devez accepter les conditions pour continuer.");
            hasError = true;
        }

        // Arr√™te le processus si des erreurs sont trouv√©es
        if (hasError) {
            signupMessage.textContent = "Veuillez corriger les erreurs dans le formulaire.";
            signupMessage.style.color = 'red';
            return;
        }

        // Si toutes les validations passent, tente l'inscription
        signupMessage.textContent = "Inscription en cours...";
        signupMessage.style.color = 'blue';

        try {
            // V√©rifie d'abord si l'utilisateur existe d√©j√† via le manager
            const existingUser = getUserByUsername(username);
            if (existingUser) {
                signupMessage.textContent = "Ce nom d'utilisateur est d√©j√† pris. Veuillez en choisir un autre.";
                signupMessage.style.color = 'red';
                return;
            }

            // Appelle la fonction `createUser` du localStorageManager
            const newUser = await createUser(username, password);

            if (newUser) {
                signupMessage.textContent = `Bienvenue, ${newUser.user} ! Inscription r√©ussie. Redirection vers la page de connexion...`;
                signupMessage.style.color = 'green';
                signupForm.reset(); // Vide les champs du formulaire apr√®s succ√®s

                setTimeout(() => {
                    window.location.href = './login.html'; // Remplacez par votre page de connexion. Chemin relatif pour rester dans le dossier 'html'
                }, 2000);
            } else {
                // createUser retourne null en cas d'√©chec (ex: nom d'utilisateur d√©j√† pris, g√©r√© au-dessus)
                signupMessage.textContent = "√âchec de l'inscription. Veuillez r√©essayer. (V√©rifiez la console pour plus de d√©tails)";
                signupMessage.style.color = 'red';
            }
        } catch (error) {
            console.error("Erreur inattendue lors de l'inscription :", error);
            signupMessage.textContent = "Une erreur est survenue lors de l'inscription.";
            signupMessage.style.color = 'red';
        }
    });
});
